{
  "contractName": "PublicEvents",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompanyPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_companyPerc",
          "type": "uint256"
        }
      ],
      "name": "setCompanyPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expertPerc",
          "type": "uint256"
        }
      ],
      "name": "setExpertPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setExpertPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hostPerc",
          "type": "uint256"
        }
      ],
      "name": "setHostPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setHostPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPlayerPers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerPers",
          "type": "uint256"
        }
      ],
      "name": "setPlayerPers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "timeAnswer",
      "outputs": [
        {
          "internalType": "int8",
          "name": "",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "timeValidate",
      "outputs": [
        {
          "internalType": "int8",
          "name": "",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_id",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_questAmount",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amountExperts",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_calculateExperts",
          "type": "bool"
        }
      ],
      "name": "newEvent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompanyPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_id\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_questAmount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amountExperts\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_calculateExperts\",\"type\":\"bool\"}],\"name\":\"newEvent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_companyPerc\",\"type\":\"uint256\"}],\"name\":\"setCompanyPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expertPerc\",\"type\":\"uint256\"}],\"name\":\"setExpertPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setExpertPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hostPerc\",\"type\":\"uint256\"}],\"name\":\"setHostPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setHostPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPlayerPers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerPers\",\"type\":\"uint256\"}],\"name\":\"setPlayerPers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"timeAnswer\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"timeValidate\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/macbook/Documents/freelance/tokenominc/contracts/events/PublicEvents.sol\":\"PublicEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/macbook/Documents/freelance/tokenominc/contracts/config/Percentages.sol\":{\"keccak256\":\"0x5cdf0c2f8b8c44b78d844350f8721eeef61d4ddabb3122c59244bd581e4c6de2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e89f45afb563b21e42b27dd5d9348f48aef1ff45bb29c910d653c19874d1a9f1\",\"dweb:/ipfs/QmV8fgkXvhF6AF6EAYBCUKpicm1FefRxxbvrp4ScWbAsdF\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/events/PublicEvents.sol\":{\"keccak256\":\"0x76f73f7ac63efe7bfbf82a703a6e60e979283fe1a167f5570b3eb27d1a64a5e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5da1a0fa839eda79a69151739011e5356f3641c5ede9508d8855a0669e8d4753\",\"dweb:/ipfs/QmRTGSCfWcpssxGkdZndF7YajamujB7Q3LJFkbfy12H4Dw\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/MetaTransactLib.sol\":{\"keccak256\":\"0x212f38f7650263af4e548d3131cd5a8779351414fbb6b41e259ab0669a70761e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://766aec88242dac17a4c9ec2695e10309545926c9ad130e9a2ee1ec6439d78eb1\",\"dweb:/ipfs/QmfKvLYc7Ky6DTgH8rUFkd3KKVejZkoXYLSVhrEKAsJJJ3\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/TimeValidation.sol\":{\"keccak256\":\"0x6b88b7d71086022426d2207f9a11f407616008d1299836472972f4b69441eb70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://14cfc5d604620dff4257dc8cada991e7a94dba1294a6463818242f1f0402dae6\",\"dweb:/ipfs/QmQUpRCpuNiLpvY2VamxJ7C54HucJCWtFVmDMFCaNZgbxM\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/common/EIP712Base.sol\":{\"keccak256\":\"0xabf82690509d325f9b76b3c5167f426dd1eadbe4f69438c594aa4431b13958c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7290b6cf2808cadce199c1ad5c1ed027253fdf6f374e2a9d86a6918c74354b26\",\"dweb:/ipfs/QmTibYrjHPjBz26TduKHPyKxhSyTkg9z9oKeCaWNKhiAfe\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/common/NetworkAgnostic.sol\":{\"keccak256\":\"0x4525fd0f773978cdacabc6d6b6acdcb35c06941cf87230c530c3775e0f17d373\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54e95be23f317452361dd7b6a577e93acb9746801dad4a78d416567703a1d5c6\",\"dweb:/ipfs/QmUQ9efSBZqHXdzv96kVWc4rafrBYGmmoQAqzvfu8vhbBY\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/struct/PubStruct.sol\":{\"keccak256\":\"0xcce6b5b4913eae22d58f2de8240297e805e17c09a75178efd1f13eca1a868f38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://514491d9d28d68911093f8e5841fec596430c576e95bcfb67e9f4a4ebec69f4d\",\"dweb:/ipfs/QmUHzXAtNrV5jVyjexn6cbiyzcN1EA8ZXhHkDoiGexLphU\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/tokens/BET.sol\":{\"keccak256\":\"0x90c6d660be5b70e69cde9f2053b2bab82b5c9e947a63e60ec34d8d59d4e9ac12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6da445a5377e03e629108e1217fe25c5b8dcfb2c06d8c0fefef6441ae2713e2b\",\"dweb:/ipfs/QmZvcu2WCce6ESKfQ7NgzFihJcXpyTCtTjTidJaA7TXPk3\"]},\"/Users/macbook/Documents/freelance/tokenominc/contracts/tokens/BTY.sol\":{\"keccak256\":\"0x0bb0c3254c9b569a7587159bce6a7e67f84311aa7538cfdd9015f87c8f848ad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92fad64a6276488bd098ea88525db7d92fe6c5999f88aed4ab9a525bbda40afa\",\"dweb:/ipfs/QmWmBrCdhpfUavfWskNMCdZUDjhrxto2t1SZbH7QMQ5H8H\"]},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0855147e38b5e36288a8df73b8da49132f14ec7abb19041b0c98872263643aaa\",\"dweb:/ipfs/QmSrSysyFUYQq7hbJaJXG7EyZW6ezDBzEJx3SABp6eiJSS\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://991b44ff44e0496e8554a90f4c0512c28faed45104d40430019f3c67ea67740e\",\"dweb:/ipfs/Qmc3nRapVbcctELoZS5qe17zLkFB3bETBfwzCTMF1CSuGE\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c\",\"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4580d57781513d98870d9738c7d39094336e0a70cdb90d68dad549c6ced466ec\",\"dweb:/ipfs/Qmf9YZzzRFuvMnav9dgmeRUpdYMMECiZX8w25sHWVbA18V\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "377:780:3:-:0;;;532:92;;;;;;;;;;274:151:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;586:1:3;396:5:4;403:8;413:9;1084:4:7;1090:7;1099;300:113:6;;;;;;;;;;;;;;;;;281:138;;;;;;702:4;686:22;;;;;;742:7;726:25;;;;;;769:8;803:4;618:204;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;595:237;;;;;;577:15;:255;;;;464:375;;;971:139:7;;;274:151:4;;;280:10:1;272:5;;:18;;;;;;;;;;;;;;;;;;607:10:3::1;599:5;;:18;;;;;;;;;;;;;;;;;;377:780:::0;;;;;;",
  "deployedSourceMap": "377:780:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;587:96:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1116:1108:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;473:108:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;676:325:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4282:112:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2632:105:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4644:223:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5818:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;96:574:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3965:136:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2950:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;689:104:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1727:49:12;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1096:89:1;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1005:85;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1191:88;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3255:125:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;909:90:1;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5101:226:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;630:525:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;799:104:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;587:96;369:5;;;;;;;;;;;355:19;;:10;:19;;;334:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;667:9:::1;656:8;:20;;;;587:96:::0;:::o;1116:1108:7:-;1311:12;1335:29;1367:148;;;;;;;;1404:6;:19;1411:11;1404:19;;;;;;;;;;;;;;;;1367:148;;;;1443:11;1367:148;;;;;;1487:17;1367:148;;;1335:180;;1547:45;1554:11;1567:6;1575:4;1581;1587;1547:6;:45::i;:::-;1526:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1737:26;1761:1;1737:6;:19;1744:11;1737:19;;;;;;;;;;;;;;;;:23;;:26;;;;:::i;:::-;1715:6;:19;1722:11;1715:19;;;;;;;;;;;;;;;:48;;;;1779:113;1816:11;1841:10;1865:17;1779:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2000:12;2014:23;2049:4;2041:18;;2090:17;2109:11;2073:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2041:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1999:132;;;;2149:7;2141:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2207:10;2200:17;;;;;1116:1108;;;;;;;:::o;473:108:1:-;369:5;;;;;;;;;;;355:19;;:10;:19;;;334:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;562:12:::1;548:11;:26;;;;473:108:::0;:::o;676:325:5:-;737:4;795:1;782:8;764:15;:26;757:39;753:242;;875:1;868:8;;;;753:242;983:1;976:8;;676:325;;;;:::o;4282:112:12:-;4339:7;4365:6;:12;4372:4;4365:12;;;;;;;;;;;:22;;;4358:29;;4282:112;;;:::o;2632:105:7:-;2685:13;2718:6;:12;2725:4;2718:12;;;;;;;;;;;;;;;;2710:20;;2632:105;;;:::o;4644:223:12:-;4727:45;4735:6;:12;4742:4;4735:12;;;;;;;;;;;:22;;;4759:12;:10;:12::i;:::-;4727:7;:45::i;:::-;4719:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4835:25;4846:4;4852:7;4835:10;:25::i;:::-;4644:223;;:::o;5818:205::-;5915:12;:10;:12::i;:::-;5904:23;;:7;:23;;;5896:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5990:26;6002:4;6008:7;5990:11;:26::i;:::-;5818:205;;:::o;96:574:5:-;199:4;263:1;248:10;230:15;:28;223:41;219:445;;322:1;302:15;291:8;:26;284:39;280:263;;413:1;406:8;;;;280:263;527:1;520:8;;;;219:445;652:1;645:8;;96:574;;;;;:::o;3965:136:12:-;4038:7;4064:30;4088:5;4064:6;:12;4071:4;4064:12;;;;;;;;;;;:20;;:23;;:30;;;;:::i;:::-;4057:37;;3965:136;;;;:::o;2950:137::-;3019:4;3042:38;3072:7;3042:6;:12;3049:4;3042:12;;;;;;;;;;;:20;;:29;;:38;;;;:::i;:::-;3035:45;;2950:137;;;;:::o;689:104:1:-;369:5;;;;;;;;;;;355:19;;:10;:19;;;334:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;775:11:::1;762:10;:24;;;;689:104:::0;:::o;1727:49:12:-;1772:4;1727:49;;;:::o;1096:89:1:-;1141:7;1168:10;;1161:17;;1096:89;:::o;1005:85::-;1048:7;1075:8;;1068:15;;1005:85;:::o;1191:88::-;1236:7;1262:10;;1255:17;;1191:88;:::o;3255:125:12:-;3318:7;3344:29;:6;:12;3351:4;3344:12;;;;;;;;;;;:20;;:27;:29::i;:::-;3337:36;;3255:125;;;:::o;909:90:1:-;955:7;981:11;;974:18;;909:90;:::o;5101:226:12:-;5185:45;5193:6;:12;5200:4;5193:12;;;;;;;;;;;:22;;;5217:12;:10;:12::i;:::-;5185:7;:45::i;:::-;5177:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5294:26;5306:4;5312:7;5294:11;:26::i;:::-;5101:226;;:::o;630:525:3:-;862:3;845:6;:11;852:3;845:11;;;;;;;;;;;:14;;:20;;;;899:10;875:6;:11;882:3;875:11;;;;;;;;;;;:21;;:34;;;;941:8;919:6;:11;926:3;919:11;;;;;;;;;;;:19;;:30;;;;985:12;959:6;:11;966:3;959:11;;;;;;;;;;;:23;;;:38;;;;;;;;;;;;;;;;;;1035:14;1007:6;:11;1014:3;1007:11;;;;;;;;;;;:25;;:42;;;;1078:12;:10;:12::i;:::-;1059:6;:11;1066:3;1059:11;;;;;;;;;;;:16;;;:31;;;;;;;;;;;;;;;;;;1131:17;1100:6;:11;1107:3;1100:11;;;;;;;;;;;:28;;;:48;;;;;;;;;;;;;;;;;;630:525;;;;;;:::o;799:104:1:-;369:5;;;;;;;;;;;355:19;;:10;:19;;;334:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;885:11:::1;872:10;:24;;;;799:104:::0;:::o;2743:390:7:-;2915:4;2972:154;2999:47;3018:27;3038:6;3018:19;:27::i;:::-;2999:18;:47::i;:::-;3064:4;3086;3108;2972:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2950:176;;:6;:176;;;2931:195;;2743:390;;;;;;;:::o;2690:175:13:-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o;598:104:17:-;651:15;685:10;678:17;;598:104;:::o;7025:184:12:-;7098:33;7123:7;7098:6;:12;7105:4;7098:12;;;;;;;;;;;:20;;:24;;:33;;;;:::i;:::-;7094:109;;;7179:12;:10;:12::i;:::-;7152:40;;7170:7;7152:40;;7164:4;7152:40;;;;;;;;;;7094:109;7025:184;;:::o;7215:188::-;7289:36;7317:7;7289:6;:12;7296:4;7289:12;;;;;;;;;;;:20;;:27;;:36;;;;:::i;:::-;7285:112;;;7373:12;:10;:12::i;:::-;7346:40;;7364:7;7346:40;;7358:4;7346:40;;;;;;;;;;7285:112;7215:188;;:::o;7677:156:18:-;7751:7;7801:22;7805:3;:10;;7817:5;7801:3;:22::i;:::-;7793:31;;7770:56;;7677:156;;;;:::o;6984:165::-;7064:4;7087:55;7097:3;:10;;7133:5;7117:23;;7109:32;;7087:9;:55::i;:::-;7080:62;;6984:165;;;;:::o;7230:115::-;7293:7;7319:19;7327:3;:10;;7319:7;:19::i;:::-;7312:26;;7230:115;;;:::o;2230:396:7:-;2337:7;329:98;;;;;;;;;;;;;;;;;310:123;;;;;;2485:6;:12;;;2519:6;:11;;;2562:6;:24;;;2552:35;;;;;;2406:199;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2379:240;;;;;;2360:259;;2230:396;;;:::o;1305:249:6:-;1401:7;1499:20;:18;:20::i;:::-;1521:11;1470:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1443:104;;;;;;1424:123;;1305:249;;;:::o;6429:150:18:-;6499:4;6522:50;6527:3;:10;;6563:5;6547:23;;6539:32;;6522:4;:50::i;:::-;6515:57;;6429:150;;;;:::o;6747:156::-;6820:4;6843:53;6851:3;:10;;6887:5;6871:23;;6863:32;;6843:7;:53::i;:::-;6836:60;;6747:156;;;;:::o;4452:201::-;4519:7;4567:5;4546:3;:11;;:18;;;;:26;4538:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4628:3;:11;;4640:5;4628:18;;;;;;;;;;;;;;;;4621:25;;4452:201;;;;:::o;3805:127::-;3878:4;3924:1;3901:3;:12;;:19;3914:5;3901:19;;;;;;;;;;;;:24;;3894:31;;3805:127;;;;:::o;4013:107::-;4069:7;4095:3;:11;;:18;;;;4088:25;;4013:107;;;:::o;845:100:6:-;897:7;923:15;;916:22;;845:100;:::o;1640:404:18:-;1703:4;1724:21;1734:3;1739:5;1724:9;:21::i;:::-;1719:319;;1761:3;:11;;1778:5;1761:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1941:3;:11;;:18;;;;1919:3;:12;;:19;1932:5;1919:19;;;;;;;;;;;:40;;;;1980:4;1973:11;;;;1719:319;2022:5;2015:12;;1640:404;;;;;:::o;2212:1512::-;2278:4;2394:18;2415:3;:12;;:19;2428:5;2415:19;;;;;;;;;;;;2394:40;;2463:1;2449:10;:15;2445:1273;;2806:21;2843:1;2830:10;:14;2806:38;;2858:17;2899:1;2878:3;:11;;:18;;;;:22;2858:42;;3140:17;3160:3;:11;;3172:9;3160:22;;;;;;;;;;;;;;;;3140:42;;3303:9;3274:3;:11;;3286:13;3274:26;;;;;;;;;;;;;;;:38;;;;3420:1;3404:13;:17;3378:3;:12;;:23;3391:9;3378:23;;;;;;;;;;;:43;;;;3527:3;:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;3619:3;:12;;:19;3632:5;3619:19;;;;;;;;;;;3612:26;;;3660:4;3653:11;;;;;;;;2445:1273;3702:5;3695:12;;;2212:1512;;;;;:::o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {MetaTransactLib} from \"../helpers/MetaTransactLib.sol\";\nimport {PubStruct} from \"../struct/PubStruct.sol\";\nimport {TimeValidation} from \"../helpers/TimeValidation.sol\";\nimport {BET} from \"../tokens/BET.sol\";\nimport {BTY} from \"../tokens/BTY.sol\";\nimport {Percentages} from \"../config/Percentages.sol\";\n\ncontract PublicEvents is MetaTransactLib, TimeValidation, Percentages {\n    address payable owner;\n    mapping(int256 => PubStruct.EventData) events;\n\n    constructor() MetaTransactLib(\"Public_contract\", \"1\", 5) {\n        owner = msg.sender;\n    }\n\n    function newEvent(\n        int256 _id,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint8 _questAmount,\n        uint256 _amountExperts,\n        bool _calculateExperts\n    ) public payable {\n        events[_id].id = _id;\n        events[_id].startTime = _startTime;\n        events[_id].endTime = _endTime;\n        events[_id].questAmount = _questAmount;\n        events[_id].amountExperts = _amountExperts;\n        events[_id].host = _msgSender();\n        events[_id].calculateExperts = _calculateExperts;\n    }\n}\n",
  "sourcePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/events/PublicEvents.sol",
  "ast": {
    "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/events/PublicEvents.sol",
    "exportedSymbols": {
      "BET": [
        1082
      ],
      "BTY": [
        1171
      ],
      "MetaTransactLib": [
        534
      ],
      "Percentages": [
        146
      ],
      "PubStruct": [
        972
      ],
      "PublicEvents": [
        473
      ],
      "TimeValidation": [
        601
      ]
    },
    "id": 474,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 368,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:32:3"
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/MetaTransactLib.sol",
        "file": "../helpers/MetaTransactLib.sol",
        "id": 370,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 535,
        "src": "66:63:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 369,
              "name": "MetaTransactLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "74:15:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/struct/PubStruct.sol",
        "file": "../struct/PubStruct.sol",
        "id": 372,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 973,
        "src": "130:50:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 371,
              "name": "PubStruct",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "138:9:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/TimeValidation.sol",
        "file": "../helpers/TimeValidation.sol",
        "id": 374,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 602,
        "src": "181:61:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 373,
              "name": "TimeValidation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "189:14:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/tokens/BET.sol",
        "file": "../tokens/BET.sol",
        "id": 376,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 1083,
        "src": "243:38:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 375,
              "name": "BET",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "251:3:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/tokens/BTY.sol",
        "file": "../tokens/BTY.sol",
        "id": 378,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 1172,
        "src": "282:38:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 377,
              "name": "BTY",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "290:3:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/config/Percentages.sol",
        "file": "../config/Percentages.sol",
        "id": 380,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 147,
        "src": "321:54:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 379,
              "name": "Percentages",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "329:11:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 381,
              "name": "MetaTransactLib",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 534,
              "src": "402:15:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MetaTransactLib_$534",
                "typeString": "contract MetaTransactLib"
              }
            },
            "id": 382,
            "nodeType": "InheritanceSpecifier",
            "src": "402:15:3"
          },
          {
            "baseName": {
              "id": 383,
              "name": "TimeValidation",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 601,
              "src": "419:14:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimeValidation_$601",
                "typeString": "contract TimeValidation"
              }
            },
            "id": 384,
            "nodeType": "InheritanceSpecifier",
            "src": "419:14:3"
          },
          {
            "baseName": {
              "id": 385,
              "name": "Percentages",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 146,
              "src": "435:11:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Percentages_$146",
                "typeString": "contract Percentages"
              }
            },
            "id": 386,
            "nodeType": "InheritanceSpecifier",
            "src": "435:11:3"
          }
        ],
        "contractDependencies": [
          146,
          534,
          601,
          686,
          888,
          1454,
          2709
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 473,
        "linearizedBaseContracts": [
          473,
          146,
          601,
          534,
          888,
          686,
          1454,
          2709
        ],
        "name": "PublicEvents",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 388,
            "mutability": "mutable",
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 473,
            "src": "453:21:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 387,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "453:15:3",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 392,
            "mutability": "mutable",
            "name": "events",
            "nodeType": "VariableDeclaration",
            "scope": 473,
            "src": "480:45:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
              "typeString": "mapping(int256 => struct PubStruct.EventData)"
            },
            "typeName": {
              "id": 391,
              "keyType": {
                "id": 389,
                "name": "int256",
                "nodeType": "ElementaryTypeName",
                "src": "488:6:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_int256",
                  "typeString": "int256"
                }
              },
              "nodeType": "Mapping",
              "src": "480:38:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                "typeString": "mapping(int256 => struct PubStruct.EventData)"
              },
              "valueType": {
                "id": 390,
                "name": "PubStruct.EventData",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 971,
                "src": "498:19:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_EventData_$971_storage_ptr",
                  "typeString": "struct PubStruct.EventData"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 405,
              "nodeType": "Block",
              "src": "589:35:3",
              "statements": [
                {
                  "expression": {
                    "id": 403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 400,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 388,
                      "src": "599:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 401,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "607:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 402,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "607:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "599:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 404,
                  "nodeType": "ExpressionStatement",
                  "src": "599:18:3"
                }
              ]
            },
            "id": 406,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "5075626c69635f636f6e7472616374",
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "562:17:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_16edb09899578c3978dd610f56ef2975ffe9a81c504eea5193ac09ba40069911",
                      "typeString": "literal_string \"Public_contract\""
                    },
                    "value": "Public_contract"
                  },
                  {
                    "hexValue": "31",
                    "id": 396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "581:3:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
                      "typeString": "literal_string \"1\""
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "35",
                    "id": 397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "586:1:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_5_by_1",
                      "typeString": "int_const 5"
                    },
                    "value": "5"
                  }
                ],
                "id": 398,
                "modifierName": {
                  "id": 394,
                  "name": "MetaTransactLib",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 534,
                  "src": "546:15:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MetaTransactLib_$534_$",
                    "typeString": "type(contract MetaTransactLib)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "546:42:3"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 393,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "543:2:3"
            },
            "returnParameters": {
              "id": 399,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "589:0:3"
            },
            "scope": 473,
            "src": "532:92:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 471,
              "nodeType": "Block",
              "src": "835:320:3",
              "statements": [
                {
                  "expression": {
                    "id": 426,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 421,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "845:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 423,
                        "indexExpression": {
                          "id": 422,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "852:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "845:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 424,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 937,
                      "src": "845:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 425,
                      "name": "_id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 408,
                      "src": "862:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "src": "845:20:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "id": 427,
                  "nodeType": "ExpressionStatement",
                  "src": "845:20:3"
                },
                {
                  "expression": {
                    "id": 433,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 428,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "875:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 430,
                        "indexExpression": {
                          "id": 429,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "882:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "875:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 431,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 939,
                      "src": "875:21:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 432,
                      "name": "_startTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 410,
                      "src": "899:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "875:34:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 434,
                  "nodeType": "ExpressionStatement",
                  "src": "875:34:3"
                },
                {
                  "expression": {
                    "id": 440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 435,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "919:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 437,
                        "indexExpression": {
                          "id": 436,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "926:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "919:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 438,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 941,
                      "src": "919:19:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 439,
                      "name": "_endTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 412,
                      "src": "941:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "919:30:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 441,
                  "nodeType": "ExpressionStatement",
                  "src": "919:30:3"
                },
                {
                  "expression": {
                    "id": 447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 442,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "959:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 444,
                        "indexExpression": {
                          "id": 443,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "966:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "959:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 445,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "questAmount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 943,
                      "src": "959:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 446,
                      "name": "_questAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 414,
                      "src": "985:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "src": "959:38:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 448,
                  "nodeType": "ExpressionStatement",
                  "src": "959:38:3"
                },
                {
                  "expression": {
                    "id": 454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 449,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "1007:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 451,
                        "indexExpression": {
                          "id": 450,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "1014:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1007:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 452,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "amountExperts",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 955,
                      "src": "1007:25:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 453,
                      "name": "_amountExperts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 416,
                      "src": "1035:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1007:42:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 455,
                  "nodeType": "ExpressionStatement",
                  "src": "1007:42:3"
                },
                {
                  "expression": {
                    "id": 462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 456,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "1059:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 458,
                        "indexExpression": {
                          "id": 457,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "1066:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1059:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 459,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "host",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 961,
                      "src": "1059:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 460,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2697,
                        "src": "1078:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                          "typeString": "function () view returns (address payable)"
                        }
                      },
                      "id": 461,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1078:12:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1059:31:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 463,
                  "nodeType": "ExpressionStatement",
                  "src": "1059:31:3"
                },
                {
                  "expression": {
                    "id": 469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 464,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "1100:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 466,
                        "indexExpression": {
                          "id": 465,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "1107:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1100:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 467,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "calculateExperts",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 957,
                      "src": "1100:28:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 468,
                      "name": "_calculateExperts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 418,
                      "src": "1131:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1100:48:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 470,
                  "nodeType": "ExpressionStatement",
                  "src": "1100:48:3"
                }
              ]
            },
            "functionSelector": "dcabba6c",
            "id": 472,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "newEvent",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 419,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 408,
                  "mutability": "mutable",
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "657:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 407,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "657:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 410,
                  "mutability": "mutable",
                  "name": "_startTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "677:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 409,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "677:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 412,
                  "mutability": "mutable",
                  "name": "_endTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "705:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 411,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "705:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 414,
                  "mutability": "mutable",
                  "name": "_questAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "731:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 413,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 416,
                  "mutability": "mutable",
                  "name": "_amountExperts",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "759:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 415,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "759:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 418,
                  "mutability": "mutable",
                  "name": "_calculateExperts",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "791:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 417,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "791:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "647:172:3"
            },
            "returnParameters": {
              "id": 420,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "835:0:3"
            },
            "scope": 473,
            "src": "630:525:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 474,
        "src": "377:780:3"
      }
    ],
    "src": "32:1126:3"
  },
  "legacyAST": {
    "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/events/PublicEvents.sol",
    "exportedSymbols": {
      "BET": [
        1082
      ],
      "BTY": [
        1171
      ],
      "MetaTransactLib": [
        534
      ],
      "Percentages": [
        146
      ],
      "PubStruct": [
        972
      ],
      "PublicEvents": [
        473
      ],
      "TimeValidation": [
        601
      ]
    },
    "id": 474,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 368,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:32:3"
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/MetaTransactLib.sol",
        "file": "../helpers/MetaTransactLib.sol",
        "id": 370,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 535,
        "src": "66:63:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 369,
              "name": "MetaTransactLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "74:15:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/struct/PubStruct.sol",
        "file": "../struct/PubStruct.sol",
        "id": 372,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 973,
        "src": "130:50:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 371,
              "name": "PubStruct",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "138:9:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/helpers/TimeValidation.sol",
        "file": "../helpers/TimeValidation.sol",
        "id": 374,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 602,
        "src": "181:61:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 373,
              "name": "TimeValidation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "189:14:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/tokens/BET.sol",
        "file": "../tokens/BET.sol",
        "id": 376,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 1083,
        "src": "243:38:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 375,
              "name": "BET",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "251:3:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/tokens/BTY.sol",
        "file": "../tokens/BTY.sol",
        "id": 378,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 1172,
        "src": "282:38:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 377,
              "name": "BTY",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "290:3:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/macbook/Documents/freelance/tokenominc/contracts/config/Percentages.sol",
        "file": "../config/Percentages.sol",
        "id": 380,
        "nodeType": "ImportDirective",
        "scope": 474,
        "sourceUnit": 147,
        "src": "321:54:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 379,
              "name": "Percentages",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "329:11:3",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 381,
              "name": "MetaTransactLib",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 534,
              "src": "402:15:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MetaTransactLib_$534",
                "typeString": "contract MetaTransactLib"
              }
            },
            "id": 382,
            "nodeType": "InheritanceSpecifier",
            "src": "402:15:3"
          },
          {
            "baseName": {
              "id": 383,
              "name": "TimeValidation",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 601,
              "src": "419:14:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimeValidation_$601",
                "typeString": "contract TimeValidation"
              }
            },
            "id": 384,
            "nodeType": "InheritanceSpecifier",
            "src": "419:14:3"
          },
          {
            "baseName": {
              "id": 385,
              "name": "Percentages",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 146,
              "src": "435:11:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Percentages_$146",
                "typeString": "contract Percentages"
              }
            },
            "id": 386,
            "nodeType": "InheritanceSpecifier",
            "src": "435:11:3"
          }
        ],
        "contractDependencies": [
          146,
          534,
          601,
          686,
          888,
          1454,
          2709
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 473,
        "linearizedBaseContracts": [
          473,
          146,
          601,
          534,
          888,
          686,
          1454,
          2709
        ],
        "name": "PublicEvents",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 388,
            "mutability": "mutable",
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 473,
            "src": "453:21:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 387,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "453:15:3",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 392,
            "mutability": "mutable",
            "name": "events",
            "nodeType": "VariableDeclaration",
            "scope": 473,
            "src": "480:45:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
              "typeString": "mapping(int256 => struct PubStruct.EventData)"
            },
            "typeName": {
              "id": 391,
              "keyType": {
                "id": 389,
                "name": "int256",
                "nodeType": "ElementaryTypeName",
                "src": "488:6:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_int256",
                  "typeString": "int256"
                }
              },
              "nodeType": "Mapping",
              "src": "480:38:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                "typeString": "mapping(int256 => struct PubStruct.EventData)"
              },
              "valueType": {
                "id": 390,
                "name": "PubStruct.EventData",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 971,
                "src": "498:19:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_EventData_$971_storage_ptr",
                  "typeString": "struct PubStruct.EventData"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 405,
              "nodeType": "Block",
              "src": "589:35:3",
              "statements": [
                {
                  "expression": {
                    "id": 403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 400,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 388,
                      "src": "599:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 401,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "607:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 402,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "607:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "599:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 404,
                  "nodeType": "ExpressionStatement",
                  "src": "599:18:3"
                }
              ]
            },
            "id": 406,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "5075626c69635f636f6e7472616374",
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "562:17:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_16edb09899578c3978dd610f56ef2975ffe9a81c504eea5193ac09ba40069911",
                      "typeString": "literal_string \"Public_contract\""
                    },
                    "value": "Public_contract"
                  },
                  {
                    "hexValue": "31",
                    "id": 396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "581:3:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
                      "typeString": "literal_string \"1\""
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "35",
                    "id": 397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "586:1:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_5_by_1",
                      "typeString": "int_const 5"
                    },
                    "value": "5"
                  }
                ],
                "id": 398,
                "modifierName": {
                  "id": 394,
                  "name": "MetaTransactLib",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 534,
                  "src": "546:15:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MetaTransactLib_$534_$",
                    "typeString": "type(contract MetaTransactLib)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "546:42:3"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 393,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "543:2:3"
            },
            "returnParameters": {
              "id": 399,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "589:0:3"
            },
            "scope": 473,
            "src": "532:92:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 471,
              "nodeType": "Block",
              "src": "835:320:3",
              "statements": [
                {
                  "expression": {
                    "id": 426,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 421,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "845:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 423,
                        "indexExpression": {
                          "id": 422,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "852:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "845:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 424,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 937,
                      "src": "845:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 425,
                      "name": "_id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 408,
                      "src": "862:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "src": "845:20:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "id": 427,
                  "nodeType": "ExpressionStatement",
                  "src": "845:20:3"
                },
                {
                  "expression": {
                    "id": 433,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 428,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "875:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 430,
                        "indexExpression": {
                          "id": 429,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "882:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "875:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 431,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 939,
                      "src": "875:21:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 432,
                      "name": "_startTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 410,
                      "src": "899:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "875:34:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 434,
                  "nodeType": "ExpressionStatement",
                  "src": "875:34:3"
                },
                {
                  "expression": {
                    "id": 440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 435,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "919:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 437,
                        "indexExpression": {
                          "id": 436,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "926:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "919:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 438,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 941,
                      "src": "919:19:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 439,
                      "name": "_endTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 412,
                      "src": "941:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "919:30:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 441,
                  "nodeType": "ExpressionStatement",
                  "src": "919:30:3"
                },
                {
                  "expression": {
                    "id": 447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 442,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "959:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 444,
                        "indexExpression": {
                          "id": 443,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "966:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "959:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 445,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "questAmount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 943,
                      "src": "959:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 446,
                      "name": "_questAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 414,
                      "src": "985:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "src": "959:38:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 448,
                  "nodeType": "ExpressionStatement",
                  "src": "959:38:3"
                },
                {
                  "expression": {
                    "id": 454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 449,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "1007:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 451,
                        "indexExpression": {
                          "id": 450,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "1014:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1007:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 452,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "amountExperts",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 955,
                      "src": "1007:25:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 453,
                      "name": "_amountExperts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 416,
                      "src": "1035:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1007:42:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 455,
                  "nodeType": "ExpressionStatement",
                  "src": "1007:42:3"
                },
                {
                  "expression": {
                    "id": 462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 456,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "1059:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 458,
                        "indexExpression": {
                          "id": 457,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "1066:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1059:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 459,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "host",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 961,
                      "src": "1059:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 460,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2697,
                        "src": "1078:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                          "typeString": "function () view returns (address payable)"
                        }
                      },
                      "id": 461,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1078:12:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1059:31:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 463,
                  "nodeType": "ExpressionStatement",
                  "src": "1059:31:3"
                },
                {
                  "expression": {
                    "id": 469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 464,
                          "name": "events",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 392,
                          "src": "1100:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_int256_$_t_struct$_EventData_$971_storage_$",
                            "typeString": "mapping(int256 => struct PubStruct.EventData storage ref)"
                          }
                        },
                        "id": 466,
                        "indexExpression": {
                          "id": 465,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "1107:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1100:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_EventData_$971_storage",
                          "typeString": "struct PubStruct.EventData storage ref"
                        }
                      },
                      "id": 467,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "calculateExperts",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 957,
                      "src": "1100:28:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 468,
                      "name": "_calculateExperts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 418,
                      "src": "1131:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1100:48:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 470,
                  "nodeType": "ExpressionStatement",
                  "src": "1100:48:3"
                }
              ]
            },
            "functionSelector": "dcabba6c",
            "id": 472,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "newEvent",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 419,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 408,
                  "mutability": "mutable",
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "657:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 407,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "657:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 410,
                  "mutability": "mutable",
                  "name": "_startTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "677:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 409,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "677:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 412,
                  "mutability": "mutable",
                  "name": "_endTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "705:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 411,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "705:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 414,
                  "mutability": "mutable",
                  "name": "_questAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "731:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 413,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 416,
                  "mutability": "mutable",
                  "name": "_amountExperts",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "759:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 415,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "759:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 418,
                  "mutability": "mutable",
                  "name": "_calculateExperts",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "791:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 417,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "791:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "647:172:3"
            },
            "returnParameters": {
              "id": 420,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "835:0:3"
            },
            "scope": 473,
            "src": "630:525:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 474,
        "src": "377:780:3"
      }
    ],
    "src": "32:1126:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Linux.g++"
  },
  "networks": {},
  "schemaVersion": "3.2.2",
  "updatedAt": "2021-02-15T20:15:48.968Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}